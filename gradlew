#!/bin/sh

#
# Copyright © 2015-2021 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
#         * compound commands having a testable exit status, especially «case»;
#         * various built-in commands including «command», «set», and «ulimit».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# This is normally unused
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
APP_HOME=$( cd "${APP_HOME:-./}" && pwd -P ) || exit

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC3045
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC3045
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, following the shell quoting and substitution rules
# shellcheck disable=SC2068
build_app_args() {
    for arg in "$@"; do
        # Originally based on https://stackoverflow.com/a/1250279/104184.
        arg=$( echo "$arg" | sed -e "s/'/'\\\\''/g" | sed -e "s/\\\\/\\\\\\\\/g" )
        printf "%s " "'$arg'"
    done
}

# Used to add extra app_args if GRADLE_OPTS contains -D options matching the given prefix.
# $1: the prefix to match
# $2: the value to use for matched options
extract_app_args_for_prefix() {
    local filtered_args
    local prefix="$1"
    local value="$2"
    local arg
    filtered_args=$( printf '%s\n' "$GRADLE_OPTS" | tr ' ' '\n' | grep -- "^-D$prefix" | tr '\n' ' ' )
    # If there's no match, just return silently.
    if [ -z "$filtered_args" ]; then
        return
    fi
    for arg in $filtered_args; do
        arg=${arg#-D} # Strip off the initial '-D'
        arg=${arg%%=*} # Strip off the '=somevalue'
        app_args="$app_args -D$arg=$value"
    done
}

# Collect all arguments for the java command;
#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $GRADLE_OPTS can contain fragments of
#     shell script including quotes and variable substitutions, so put them in
#     double quotes to make sure that they get re-expanded; and
#   * put everything else in single quotes, so that it's not re-expanded.

# Collect all arguments for the java command.
# Because DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS might have spaces or other IFS characters within,
# they are deliberately not quoted here: word-spliting is expected.
# shellcheck disable=SC2206
java_opts=( $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS )
java_opts_without_log_options=()
log_options_app_args=""

for opt in "${java_opts[@]}"; do
    case $opt in
        -Dorg.gradle.daemon.idletimeout=*) # Preserve Daemon options
            java_opts_without_log_options+=( "$opt" )
            ;;
        -Dorg.gradle.logging.*=*) # Extract -D logging options
            opt=${opt#-D} # Strip off the initial '-D'
            opt_name=${opt%%=*} # Strip off the '=somevalue'
            opt_value=${opt#*=} # Strip off the 'name='
            # Map Gradle's log level to the daemon log level
            case $opt_value in
                quiet)
                    log_level=error
                    ;;
                warn)
                    log_level=warning
                    ;;
                debug|info)
                    log_level=$opt_value
                    ;;
                *)
                    java_opts_without_log_options+=( "-D$opt" )
                    continue
                    ;;
            esac
            log_options_app_args="$log_options_app_args --log-level=$log_level"
            ;;
        *) # Preserve non-log options
            java_opts_without_log_options+=( "$opt" )
            ;;
    esac
done

# Extract flag options from GRADLE_OPTS. Used when the Daemon is run from an inline-execution.
app_args=""
extract_app_args_for_prefix "org.gradle.daemon.idleTimeout" "$(expr 1000 \* 60 \* 3)"
extract_app_args_for_prefix "org.gradle.daemon.registryBase" "~/.gradle/daemon"
extract_app_args_for_prefix "org.gradle.logging.stacktrace" "full"

# Add legacy log level args. Used when the daemon is running from an inline-execution.
if [ -n "$app_args" ] && [ -n "$log_options_app_args" ]; then
    app_args="$app_args $log_options_app_args"
fi

# Collect all arguments for the java command:
#   * use $java_opts_without_log_options instead of $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $GRADLE_OPTS.
#   * use $app_args for arguments to the Gradle command
#   * add the Gradle command itself
#   * add the main classname
#   * add passthrough arguments from the Gradle invocation.

# Collect JVM options.
java_cmd_args=()

# Collect quoted JVM options.
# We need to use printf to preserve spaces and single quotes
# shellcheck disable=SC2046
java_cmd_args+=( $(build_app_args "${java_opts_without_log_options[@]}") )

# Add main class.
java_cmd_args+=( org.gradle.wrapper.GradleWrapperMain )

# Add quoted direct args.
java_cmd_args+=( "$app_args" )

# Add quoted passthrough args.
# shellcheck disable=SC2068
java_cmd_args+=( $(build_app_args "$@") )

set -- "$JAVACMD" "${java_cmd_args[@]}"

# Stop when "xargs" is not available.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" )
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of the variables in question contain newlines,
# but that's a fundamental limitation of POSIX shell.

eval "set -- $(
        printf '%s\n' "$*" |
        xargs -n1 |
        sed 's/[^a-zA-Z0-9_.:\/+=.,%@-]/\\&/g' |
        tr '\n' ' '
    )"

exec "$@" 